import telebot
import random
from telebot import types
from datetime import datetime, timedelta
import json
import requests
import time
import uuid
from yookassa import Payment
from config import BOT_TOKEN, FOLDER_ID, SERVICE_ACCOUNT_ID, YANDEX_PRIVATE_KEY_PATH, YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY, YOOKASSA_RETURN_URL, TRIAL_PRICE, MONTHLY_PRICE
from flask import Flask, request
import os
import logging
from dotenv import load_dotenv
load_dotenv()
from yookassa import Configuration
from config import YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY
from db import init_db, set_subscription_active, is_subscription_active, get_subscription_expiry

WEBHOOK_URL = 'https://i-am-bog.onrender.com/'  # –ø—Ä–∏–º–µ—Ä: https://taro-bot.onrender.com/

bot = telebot.TeleBot(BOT_TOKEN)

bot.remove_webhook()

logging.basicConfig(level=logging.DEBUG)

app = Flask(__name__)

# –ü—Ä–∏–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–¥–ø–∏—Å–æ–∫
subscriptions = {}

app = Flask(__name__)
bot = telebot.TeleBot(BOT_TOKEN)

@app.route('/yookassa_webhook', methods=['POST'])
def yookassa_webhook():
    payload = request.get_json()

    if payload.get("event") == "payment.succeeded":
        payment = payload["object"]
        user_id = int(payment["metadata"]["user_id"])
        sub_type = payment["metadata"].get("subscription_type", "trial")

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        set_subscription_active(user_id, days=30)
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ ({sub_type}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–π
        if sub_type == "trial":
            def auto_renew():
                payment = Payment.create({
                    "amount": {
                        "value": "689.00",
                        "currency": "RUB"
                    },
                    "confirmation": {
                        "type": "redirect",
                        "return_url": YOOKASSA_RETURN_URL
                    },
                    "capture": True,
                    "description": f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id {user_id}",
                    "metadata": {
                        "user_id": str(user_id),
                        "subscription_type": "auto"
                    }
                }, uuid.uuid4())

                bot.send_message(user_id,
                    f"üîÅ –°—Ä–æ–∫ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:\n{payment.confirmation.confirmation_url}")

            from threading import Timer
            Timer(30 * 24 * 60 * 60, auto_renew).start()

    return '', 200

@app.route('/webhook', methods=['POST'])
def telegram_webhook():
    update = request.get_data().decode("utf-8")
    bot.process_new_updates([telebot.types.Update.de_json(update)])
    return "OK", 200


# –ü—É—Ç—å –∫ –∫–ª—é—á—É —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
KEY_FILE = 'sa_key.json'

# –ü–æ–ª—É—á–µ–Ω–∏–µ IAM —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
def get_iam_token():
    with open(KEY_FILE, 'r') as f:
        sa_key = json.load(f)

    import jwt
    from datetime import datetime, timedelta, timezone

    now = datetime.now(timezone.utc)
    payload = {
        "aud": "https://iam.api.cloud.yandex.net/iam/v1/tokens",
        "iss": sa_key["service_account_id"],
        "iat": int(now.timestamp()),
        "exp": int((now + timedelta(hours=1)).timestamp())
    }

    encoded_jwt = jwt.encode(
        payload,
        sa_key["private_key"],
        algorithm="PS256",
        headers={"kid": sa_key["key_id"]}  # <--- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!
    )

    response = requests.post(
        "https://iam.api.cloud.yandex.net/iam/v1/tokens",
        headers={"Content-Type": "application/json"},
        json={"jwt": encoded_jwt}
    )

    if response.status_code == 200:
        return response.json()["iamToken"]
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IAM —Ç–æ–∫–µ–Ω–∞: {response.text}")

# –í—Å–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ
TAROT_CARDS = [
    '–®—É—Ç', '–ú–∞–≥', '–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞', '–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞', '–ò–º–ø–µ—Ä–∞—Ç–æ—Ä', '–ò–µ—Ä–æ—Ñ–∞–Ω—Ç', '–í–ª—é–±–ª–µ–Ω–Ω—ã–µ', '–ö–æ–ª–µ—Å–Ω–∏—Ü–∞',
    '–°–∏–ª–∞', '–û—Ç—à–µ–ª—å–Ω–∏–∫', '–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã', '–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å', '–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π', '–°–º–µ—Ä—Ç—å', '–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
    '–î—å—è–≤–æ–ª', '–ë–∞—à–Ω—è', '–ó–≤–µ–∑–¥–∞', '–õ—É–Ω–∞', '–°–æ–ª–Ω—Ü–µ', '–°—É–¥', '–ú–∏—Ä'
] + [f'{rank} {suit}' for suit in ['–∂–µ–∑–ª–æ–≤', '–∫—É–±–∫–æ–≤', '–º–µ—á–µ–π', '–ø–µ–Ω—Ç–∞–∫–ª–µ–π'] for rank in [
    '–¢—É–∑', '2', '3', '4', '5', '6', '7', '8', '9', '10', '–ü–∞–∂', '–†—ã—Ü–∞—Ä—å', '–ö–æ—Ä–æ–ª–µ–≤–∞', '–ö–æ—Ä–æ–ª—å']]

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
user_data = {}

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π IAM —Ç–æ–∫–µ–Ω –∏ ID –∫–∞—Ç–∞–ª–æ–≥–∞

def ask_yandex_gpt(prompt_text):
    iam_token = get_iam_token()  # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∫–∞–∂–¥—ã–π —Ä–∞–∑
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

    headers = {
        "Authorization": f"Bearer {iam_token}",
        "Content-Type": "application/json"
    }

    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.7,
            "maxTokens": 1000
        },
        "messages": [
            {
                "role": "system",
                "text": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞—Å–∫–ª–∞–¥ –∫–∞—Ä—Ç –∏ –æ—Ç–≤–µ—á–∞–π –ø–æ –¥–µ–ª—É, –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫."
            },
            {
                "role": "user",
                "text": prompt_text
            }
        ]
    }

    response = requests.post(url, headers=headers, data=json.dumps(data))

    if response.status_code == 200:
        result = response.json()
        return result["result"]["alternatives"][0]["message"]["text"]
    else:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ YandexGPT:", response.text)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ä–∞—Å–∫–ª–∞–¥ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚ú®\n\n"
"–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ.\n"
"–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã –ø—Ä—è–º–æ –∑–¥–µ—Å—å –≤ –±–æ—Ç–µ –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –∏—Ö –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–≤–æ—é –∫–æ–ª–æ–¥—É üÉè\n\n"
"–ü—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞:\n"
"–ù–∞–ª–∞–¥—è—Ç—Å—è –ª–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –º–∞–º–æ–π?\n"
"–ü—Ä–∏–º–µ—Ä —Ä–∞—Å–∫–ª–∞–¥–∞:\n"
"–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞, –ë–∞—à–Ω—è, 2 –∫—É–±–∫–æ–≤\n\n"
"P.S. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start\n"
"–ú–µ–Ω—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–∏–∑—É —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è üëá"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /question
@bot.message_handler(commands=['question'])
def handle_question(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê–ª–µ–Ω–∞ 23)")
    bot.register_next_step_handler(message, ask_question)

def ask_question(message):
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫: –ò–º—è 23")
        return
    user_data[message.chat.id] = {'name': parts[0], 'age': parts[1]}
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞:")
    bot.register_next_step_handler(message, ask_card_choice)

def ask_card_choice(message):
    user_data[message.chat.id]['question'] = message.text
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å 3 –∫–∞—Ä—Ç—ã", callback_data='choose_cards'))
    markup.add(types.InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã", callback_data='write_cards'))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏, –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—ã:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'choose_cards')
def handle_choose_cards(call):
    chat_id = call.message.chat.id

    #  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not is_subscription_active(chat_id):
        bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return

    selected = random.sample(TAROT_CARDS, 3)
    user_data[chat_id]['cards'] = selected

    cards_text = "\n".join(selected)
    question = user_data[chat_id]['question']

    bot.send_message(chat_id, f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã:\n{cards_text}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è...")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if chat_id not in user_data:
        user_data[chat_id] = {}

    user_data[chat_id]['cards'] = selected
    question = user_data[call.message.chat.id]['question']
    interpretation = generate_ai_interpretation(question, selected)
    bot.send_message(call.message.chat.id, f"–ö–∞—Ä—Ç—ã: {', '.join(selected)}\n\n{interpretation}")

@bot.callback_query_handler(func=lambda call: call.data == 'write_cards')
def handle_write_cards(call):
    bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ —Ç—Ä–∏ –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü—Ä–∏–º–µ—Ä: –í–ª—é–±–ª–µ–Ω–Ω—ã–µ, –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å, 6 –º–µ—á–µ–π")
    bot.register_next_step_handler(call.message, handle_user_cards)

def handle_user_cards(message):
    cards = [card.strip() for card in message.text.split(',')]
    if len(cards) != 3:
        bot.send_message(message.chat.id, "–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ä–æ–≤–Ω–æ 3 –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        return
    user_data[message.chat.id]['cards'] = cards
    question = user_data[message.chat.id]['question']
    interpretation = generate_ai_interpretation(question, cards)
    bot.send_message(message.chat.id, f"–ö–∞—Ä—Ç—ã: {', '.join(cards)}\n\n{interpretation}")

def generate_ai_interpretation(question, cards):
    prompt = f"–í–æ–ø—Ä–æ—Å: {question}\n–ö–∞—Ä—Ç—ã: {', '.join(cards)}\n–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞—Ä—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–º–∏. –î–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é, –Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–∞—Å–∫–ª–∞–¥–∞."
    return ask_yandex_gpt(prompt)

@bot.callback_query_handler(func=lambda call: call.data.startswith("selected_cards:"))
def handle_card_selection(call):
    selected_cards = call.data.split(":")[1].split(",")
    question = user_data[call.from_user.id]['question']

    prompt = f"–í–æ–ø—Ä–æ—Å: {question}\n–ö–∞—Ä—Ç—ã: {', '.join(selected_cards)}\n–î–∞–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–∞—Å–∫–ª–∞–¥–∞."
    interpretation = ask_yandex_gpt(prompt)

    bot.send_message(call.message.chat.id, f"üîÆ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞:\n{interpretation}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help

@bot.message_handler(commands=['help'])
def handle_help(message):
    text = '''–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º ‚¨áÔ∏è

–í –Ω–∞—à–µ–º –±–æ—Ç–µ –µ—Å—Ç—å –≤–µ–±-–∫–∞—Ä—Ç—ã (–æ–Ω–ª–∞–π–Ω-–∫–∞—Ä—Ç—ã, –æ–Ω–∏ –¥–ª—è —Ç–µ—Ö, —É –∫–æ–≥–æ –Ω–µ—Ç –∫–∞—Ä—Ç –Ω–∞ —Ä—É–∫–∞—Ö), —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π:
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å¬ª, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.
2. –ü–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞, –≤–Ω–∏–∑—É –≤ –º–µ–Ω—é –≤—ã–π–¥–µ—Ç –æ–∫–Ω–æ ¬´–ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—ã¬ª, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É.
3. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –∫–∞—Ä—Ç—ã, –∑–∞—Ç–µ–º –¥–æ–∂–¥–∏—Ç–µ—Å—å –≤–∞—à–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ üôèüèº

–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–∞–º–æ–º—É –≤–≤–µ—Å—Ç–∏ –∫–∞—Ä—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∫–æ–ª–æ–¥–∞:
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å¬ª.
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É.
‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ –∏ –≤—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ (–∫–∞—Ä—Ç—ã –≤–≤–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é).
‚Ä¢ –ê —Ç–µ–ø–µ—Ä—å –∂–¥–∏—Ç–µ —Ç—Ä–∞–∫—Ç–æ–≤–∫—É —Ä–∞—Å–∫–ª–∞–¥–∞.

–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:

–°—Ç–æ–∏—Ç –ª–∏ –º–Ω–µ –∏–¥—Ç–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?
–ü—Ä–∏–º–µ—Ä –≤—ã–ø–∞–≤—à–∏—Ö –∫–∞—Ä—Ç:
–í–ª—é–±–ª–µ–Ω–Ω—ã–µ, –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å, –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–π –ü–∞–∂ –∫—É–±–∫–æ–≤.
(–ë–æ—Ç —Ç–∞–∫–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏)

–° –ª—é–±–æ–≤—å—é ‚ù§Ô∏è –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç

<a href='https://telegra.ph/Polzovatelskoe-soglashenie-12-16-9'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</a>
'''
    bot.send_message(message.chat.id, text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /subscriptions

Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY

@bot.message_handler(commands=['subscriptions'])
def handle_subscriptions(message):
    user_id = message.chat.id
    now = datetime.now()
    expiry = get_subscription_expiry(user_id)
    if expiry and datetime.fromisoformat(expiry) > datetime.now():
        bot.send_message(user_id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {datetime.fromisoformat(expiry).strftime('%d.%m.%Y %H:%M')}")
    else:
        markup = types.InlineKeyboardMarkup()
        pay_button = types.InlineKeyboardButton(
            "üÜì –û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É (99‚ÇΩ)",
            url=create_yookassa_payment_url(user_id)  # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
        )
        markup.add(pay_button)
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–±–Ω—É—é –Ω–∞ 1 –¥–µ–Ω—å (99‚ÇΩ)?", reply_markup=markup)


def create_yookassa_payment_url(user_id):
    payment = Payment.create({
        "amount": {
            "value": "99.00",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": YOOKASSA_RETURN_URL
        },
        "capture": True,
        "description": f"–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è user_id {user_id}",
        "metadata": {
            "user_id": str(user_id),
            "subscription_type": "trial"
        }
    }, uuid.uuid4())
    return payment.confirmation.confirmation_url


if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    port = int(os.environ.get("PORT", 8080))
    app.run(host='0.0.0.0', port=port)



